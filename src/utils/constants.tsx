import { nanoid } from 'nanoid';
export const BASEURL = 'https://norma.nomoreparties.space/api';
export const MODAL = document.getElementById('modal')!;
export const WSURL = 'wss://norma.nomoreparties.space/orders';

export const menuItems = [
  {id: nanoid(10), name: '–ë—É–ª–∫–∏', value: 'one'},
  {id: nanoid(10), name: '–°–æ—É—Å—ã', value: 'two'},
  {id: nanoid(10), name: '–ù–∞—á–∏–Ω–∫–∏', value: 'three'},
];


export function checkResponse(res: Response) {
  if (res.ok) {
    return res.json();
  }
  return Promise.reject(res.json());
};

export function getMessage(message: string):string {
  switch (message) {
    case 'User already exists':
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üôÄ';
    case 'email or password are incorrect':
      return '–ü–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
    case 'Email, password and name are required fields':
      return '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    case 'Reset email sent':
      return '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É';
    case 'Invalid credentials provided':
      return '–î–∞–Ω–Ω—ã–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö';
    case 'Password successfully reset':
      return '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω';
    default:
      return message
  }
};

export function getCookie(name: string): string {
  let matches = document.cookie.match(new RegExp(
    "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
  ));
  return matches ? decodeURIComponent(matches[1]) : 'undefined';
};


export function setCookie(name: string, value: string, options: any = {}) {

  options = {
    path: '/',
    ...options
  };

  if (options.expires instanceof Date) {
    options.expires = options.expires.toUTCString();
  }

  let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);

  for (let optionKey in options) {
    updatedCookie += "; " + optionKey;
    let optionValue = options[optionKey];
    if (optionValue !== true) {
      updatedCookie += "=" + optionValue;
    }
  }

  document.cookie = updatedCookie;
};

export function deleteCookie(name: string, value: string) {
  return setCookie(name, value, {
    'max-age': -1,
  })
};